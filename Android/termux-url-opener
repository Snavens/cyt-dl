#!/bin/bash
#
#   Copyright (c) 2023 falkensnavens
#   All rights reserved.
#
# source -- https://github.com/Snavens/cyt-dl
# 
formats="
\e[035ma\e[0m: Downloads 1080p Video
\e[035mb\e[0m: Downloads 1440p Video
\e[035mc\e[0m: Downloads 720p Video
\e[035md\e[0m: Downloads mp3 Audio
\e[035me\e[0m: Downloads 2160p Video
\e[035mv\e[0m: Downloads video where all of the above formats fail or non-youtube videos
--> If you wish to download and play add \e[035mp\e[0m(for example \e[035map\e[0m) to your \e[034moptions\e[0m.
--> If for any reason format fails try using \e[035mv\e[0m as \e[034moption\e[0m.
--> Use \e[034moption\e[0m \e[035ms\e[0m(format) to stream files.
\e[096mWhen download and play option is selected:\e[0m
--> Loop play \e[035m-l\e[0m just after \e[034moption\e[0m. 
--> Play last downloaded with \e[035mp\e[0m as \e[034moption\e[0m.\n"
usage(){
    echo "Usage: $(basename $0) {OPTION} <url> | <destination>"
    echo -e "Options:$formats
Default videos directory is /sdcard/YoutubeVideos and audio files stored in /sdcard/YoutubeAudio"
}
#   print usage and help
if [[ $# -eq 0 || $1 == -help || $1 == --help || $1 == -h || $1 == --h ]] ; then
    usage
    exit 0
fi
# check if required commands are installed
check_command(){
    if ! command -v $@ &>/dev/null ;then
        apt update && apt upgrade < <(yes)
        echo -e "\e[091m$@ not found on system..\e[092minstalling\e[0m"
        if [ $@ == yt-dlp ];then
            apt -y install python-pip
            pip install yt-dlp 
        else
            apt -y install $@
        fi
    fi
    if ! command -v $@ &>/dev/null ;then
        echo -e "\e[091minstall failed!"
        exit $?
    fi
}
check_command ffmpeg && check_command yt-dlp

if [[ ! -d /sdcard/YoutubeVideos ]];then
    mkdir /sdcard/YoutubeVideos
fi

if [[ ! -d /sdcard/YoutubeAudio ]];then
    mkdir /sdcard/YoutubeAudio
fi

check_input(){
    case $@ in
        a* | b* | c* | v* | e*)
        cd /sdcard/YoutubeVideos
        dlc=/sdcard/YoutubeVideos
        ;;
        d*)
        cd /sdcard/YoutubeAudio
        dlc=/sdcard/YoutubeAudio
        ;;
        s*)
        echo "streaming..."
        ;;
        *)
        echo -en "pleeaase give the right input -: "
        read opt
        case $opt in
            a* | b* | c* | v*| e*)
            cd /sdcard/YoutubeVideos
            dlc=/sdcard/YoutubeVideos
            ;;
            d*)
            cd /sdcard/YoutubeAudio
            dlc=/sdcard/YoutubeAudio
            ;;
            s*)
            echo "streaming..."
            ;;
            *)
            echo -e "you did not give the right input, quitting...\n"
            sleep .5
            exit $?
            ;;
        esac
        ;;
    esac
}

# start of main code
fnd() {

    case $1 in
        p)
		cd "$2"
        mpv_player() {
            echo "$(find -iname "*$3*" -exec echo \"{}\" \;)"|grep -v ".part">${tmp_scrpt}
            if [[ $(cat ${tmp_scrpt}) ]];then
                echo -en "\e[033mPlaying:\e[094m"
                list='';while IFS= read li;do list="$list $li";done <${tmp_scrpt}        
                echo -e "
$(cat ${tmp_scrpt}|nl)\e[032m";sleep 1
                bash<<<$(echo "mpv -v --fs $list")
                # remove temp files
                rm ${tmp_scrpt} >/dev/null 2>&1
            else
                echo -e "\e[031mno files found!"
            fi
        }
        mpv_player "$@"
		;;

		pl)
		cd "$2"
        mpv_player() {
            find -iname "*$3*" -exec echo "\"{}\"" \;|grep -v ".part" >${tmp_scrpt}
            if [[ $(cat ${tmp_scrpt}) ]];then
                echo -en "\e[033mPlaying:\e[094m"
                list="";while IFS= read -r li;do list="$list $li";done<${tmp_scrpt}        
                echo -e "
$(cat ${tmp_scrpt}|nl)\e[032m";sleep 1
                bash<<<$(echo "mpv -v --loop-file=3 --fs$list")
                #remove temp files
                rm ${tmp_scrpt} >/dev/null 2>&1
            else
                echo -e "\e[031mno files found!"
            fi
        }
        mpv_player "$@"
		;;
        s*)
        case $1 in
            s-l)
            shift
            mpv --loop-file=3 $@
            ;;
            s)
            shift
            mpv $@
            ;;
            *)
            echo $@
            echo "please read help menu!"
            ;;
        esac
        ;;
	esac

}
tmp_scrpt=~/cyt-`cat /dev/urandom | tr -cd 'a-z' | head -c 10|awk '{print $1}'`.sh
LOG_FILE=~/.cyt-`cat /dev/urandom | tr -cd 'a-z' | head -c 4|awk '{print $1}'`
HIST_FILE=~/.cyt-hist.tmp

if [ $1 == p ];then #play saved file if in history
	if [ -f ${HIST_FILE} ];then
		fnd `cat ${HIST_FILE}`
	else
		echo -e "\e[031m You haven't downloaded any file!"
		exit 1
	fi
else
	echo -en "$formats\n
    	please give your input -: "
	read opt
	check_input $opt
	fnd_p() {

        if [[ $1 == -l && $2 != s-l || $1 != s ]];then
            shift 2;p=pl
        elif [[ $2 == s* || $1 == s ]];then
            if [[ $1 == -l ]];then
                shift
            fi
            fnd "$@"
            echo "$@">${HIST_FILE}
            return
        else
            shift
            p=p
        fi

        if [[ $(grep "+" <<< $(grep -oP '(?<=format\(s\):\s).*(?=)' ${LOG_FILE})) ]];then
            formats=2
        else
            formats=1
        fi

        if [[ $(grep downloaded ${LOG_FILE}) || $(grep "download]\s100%" ${LOG_FILE}|wc -l) == $formats \
            || $(grep "download]\s100%" ${LOG_FILE}|wc -l) > $formats ]];then
            LOG=`tac ${LOG_FILE}|grep -m1 -oP '(?<=]\s).*?(?=:\sDownloading)'`
            if [[ ! -z $LOG ]];then
                check_command mpv
                fnd $p "$dlc" "$LOG"
                echo "$p "$dlc" "$LOG"">${HIST_FILE}
            else
                return
            fi

        else
            echo -e "Download failed!"
            return
        fi
        rm ${LOG_FILE} >/dev/null 2>&1

    }
    aID="248+251"/"137+251"/"399+140"/"303+140"/"299+251"/"96"; bID="400+140"/"271+251" ; dID="140"/"251"/"250"
    cID="247+140"/"22+251"/"136+140"/"398+251" ; vID=b/"299+250"/"303+251"/"301"/"243+140"/"136+250"/hls-2176/http/mpeg/fallback
    eID="337+140"/"315+251"/"337+251"/"315+140"
    add_info="--embed-subs --sub-langs=en-orig,en --merge-output-format mp4"
    check_loop(){
        if [[ $@ =~ -l ]];then
            fnd_p -l $@
        else
            fnd_p $@
        fi
    }
    # download and save to $dlc
    case $opt in
        a)
        echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $aID $add_info "$1"
        ;;
        b)
        echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $bID $add_info "$1"
        ;;
        c)
        echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $cID $add_info "$1"
        ;;
        d)
        echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $dID --extract-audio --audio-format mp3 --audio-quality 1 "$1"
        ;;
        v)
        echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $vID $add_info "$1"
        ;;
        e)
        echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $eID $add_info "$1"
        ;;
        
        # download and play
        dp|dp-l)
        echo -e "\e[032mSaving to $dlc\e[0m"
        yt-dlp -f $dID --extract-audio --audio-format mp3 --audio-quality 1 "$1" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
        check_loop $opt
        ;;

        ap-l|bp-l|cp-l|ep-l|vp-l)
        echo "not playing videos!"
        case $opt in
            ap-l|ap)
            echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $aID $add_info "$1"
            ;;
            bp-l|bp)
            echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $bID $add_info "$1"
            ;;
            cp-l|cp)
            echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $cID $add_info "$1"
            ;;
            vp-l|vp)
            echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $vID $add_info "$1"
            ;;
            ep-l|ep)
            echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $eID $add_info "$1"
            ;;
        esac
        ;;

        s*)
        check_command mpv
        check_loop $opt -v --ytdl-format=b/$dID "$1"
        ;;

        *)
        usage
        exit $?
        ;;

    esac
fi
