#!/bin/bash
#
#   Copyright (c) 2023 falkensnavens
#   All rights reserved.
#
# source -- https://github.com/Snavens/cyt-dl
# 
formats="
\e[035ma\e[0m: Downloads 1080p Video
\e[035mb\e[0m: Downloads 1440p Video
\e[035mc\e[0m: Downloads 720p Video
\e[035md\e[0m: Downloads mp3 Audio
\e[035mv\e[0m: Downloads video where all of the above formats fail or non-youtube videos
--> If you wish to download and play add \e[035mp\e[0m(for example \e[035map\e[0m) to your \e[034moptions\e[0m.
--> If for any reason format fails try using \e[035mv\e[0m as \e[034moption\e[0m.
--> Use \e[034moption\e[0m \e[035m-s\e[0m(format) to stream files.
\e[096mWhen download and play option is selected:\e[0m
--> Loop play \e[035m-l\e[0m just after \e[034moption\e[0m. 
--> Play last downloaded with \e[035m-p\e[0m as \e[034moption\e[0m.\n"
#print usage and help
if [[ $# -eq 0 || $1 == -help || $1 == --help || $1 == -h || $1 == --h ]] ; then
    echo "Usage: $(basename $0) {OPTION} <url> | <destination>"
    echo -e "Options:$formats
Default videos directory is /sdcard/YoutubeVideos and audio files stored in /sdcard/YoutubeAudio"
    exit 0
fi

echo -en "$formats\n
please give your input -: "
read opt
if [[ ! -d /sdcard/YoutubeVideos ]];then
    mkdir /sdcard/YoutubeVideos
fi
if [[ ! -d /sdcard/YoutubeAudio ]];then
    mkdir /sdcard/YoutubeAudio
fi
case $opt in 
    a* | b* | c* | v*)
    cd /sdcard/YoutubeVideos
    dlc=/sdcard/YoutubeVideos
    ;;
    d*)
    cd /sdcard/YoutubeAudio
    dlc=/sdcard/YoutubeAudio
    ;;
    -s*)
    echo "streaming..."
    ;;
    *)
    echo -en "please give the right input -: "
    read opt
    case $opt in 
        a* | b* | c* | v*)
        cd /sdcard/YoutubeVideos
        dlc=/sdcard/YoutubeVideos
        ;;
        d*)
        cd /sdcard/YoutubeAudio
        dlc=/sdcard/YoutubeAudio
        ;;
        -s*)
        echo "streaming..."
        ;;
        *)
        echo -en "you did not give the right input, quitting..."
        exit $?
        ;;
    esac
    ;;
esac

#start of main code
fnd() {

    case $1 in
        p)
		cd "$2"
        mpv_player() {
            echo "$(find -iname "*$3*" -exec echo \"{}\" \;)"|grep -v ".json">${tmp_scrpt}
            if [[ $(cat ${tmp_scrpt}) ]];then
                echo -en "\e[033mPlaying:\e[094m"
                list='';while IFS= read li;do list="$list $li";done <${tmp_scrpt}
                bash<<<$(echo "mpv -v --fs $list >/dev/null 2>&1 &")
                echo -e "
$(cat ${tmp_scrpt}|nl)\e[032m";sleep 1
                #remove temp files
                rm ${tmp_scrpt} >/dev/null 2>&1
            else
                echo -e "\e[031mno files found!"
            fi
        }
        mpv_player "$@"
		;;

		pl)
		cd "$2"
        mpv_player() {
            find -iname "*$3*" -exec echo "\"{}\"" \;|grep -v ".json" >${tmp_scrpt}
            if [[ $(cat ${tmp_scrpt}) ]];then
                echo -en "\e[033mPlaying:\e[094m"
                list="";while IFS= read -r li;do list="$list $li";done<${tmp_scrpt}
                bash<<<$(echo "mpv -v --loop-file=3 --fs$list >/dev/null 2>&1 &"|grep -v ".json")
                echo -e "
$(cat ${tmp_scrpt}|nl)\e[032m";sleep 1
                #remove temp files
                rm ${tmp_scrpt} >/dev/null 2>&1
            else
                echo -e "\e[031mno files found!"
            fi
        }
        mpv_player "$@"
		;;
        s)
        shift
        mpv $@
        ;;
	esac

}
tmp_scrpt=~/cyt-fnd.sh
LOG_FILE=~/.cyt-tmp
TEMP_FILE=~/.cyt-hist.tmp
fnd_p() {
   
    if [[ $1 == -l ]];then
        shift;p=pl
    elif [[ $1 == -s* ]];then
        shift
        echo "s $@">${TEMP_FILE}
        fnd `cat ${TEMP_FILE}` 
        rm ${TEMP_FILE} >/dev/null 2>&1
        return
    else
        p=p
    fi

    if [[ $(grep "+" <<< $(grep -oP '(?<=format\(s\):\s).*(?=)' ${LOG_FILE})) ]];then
        formats=2
    else
        formats=1
    fi

    if [[ $(grep downloaded ${LOG_FILE}) || $(grep "download]\s100%" ${LOG_FILE}|wc -l) < 2formats \
        || $(grep "download]\s100%" ${LOG_FILE}|wc -l) > $formats ]];then
        LOG=`tac ${LOG_FILE}|grep -m1 -oP '(?<=]\s).*?(?=:\sDownloading)'`
        if [[ ! -z $LOG ]];then 
            if command -v mpv &>/dev/null ;then
                fnd $p "$dlc" "$LOG"
            else
                echo -e "\e[031mYou need to download mpv to play file!\e[0m"
                exit $?
            fi
        else
            return
        fi
        
    else
        echo -e "Download failed!"
        return
    fi

}
aID="248+251"/"137+251"/"399+140"/"303+140"/"299+251"/"96"; bID="400+140"/"271+251" ; dID="140"/"251"/"250"
cID="247+140"/"22+251"/"136+140"/"398+251" ; vID=b/"299+250"/"303+251"/"301"/"243+140"/"136+250"/hls-2176/http/mpeg/fallback
add_info="$add_info --sub-langs=en-orig,en"
if [[ $opt == a ]]; then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $aID --merge-output-format mp4 $add_info $1
elif [[ $opt == b ]]; then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $bID --merge-output-format mp4 $add_info $1
elif [[ $opt == c ]]; then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $cID --merge-output-format mp4 $add_info $1
elif [[ $opt == d ]]; then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $dID --extract-audio --audio-format mp3 --audio-quality 1 $1
elif [[ $opt == v ]];then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $vID --merge-output-format mp4 $add_info $1

elif [[ $opt == ap ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $aID --merge-output-format mp4 $add_info $1 > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p

elif [[ $opt == bp ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $bID --merge-output-format mp4 $add_info $1 > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p

elif [[ $opt == cp ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $cID --merge-output-format mp4 $add_info $1 > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p

elif [[ $opt == dp ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $dID --extract-audio --audio-format mp3 --audio-quality 1 $1 > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p

elif [[ $opt == vp ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $vID --merge-output-format mp4 $add_info $1 > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p

elif [[ $opt == ap-l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $aID --merge-output-format mp4 $add_info $1 > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l

elif [[ $opt == bp-l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $bID --merge-output-format mp4 $add_info $1 > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l

elif [[ $opt == cp-l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $cID --merge-output-format mp4 $add_info $1 > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l

elif [[ $opt == dp-l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $dID --extract-audio --audio-format mp3 --audio-quality 1 $1 > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l

elif [[ $opt == vp-l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $vID --merge-output-format mp4 $add_info $1 > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l

elif [[ $opt == -s* ]];then #stream 
    if command -v mpv &>/dev/null ;then
        format_selector(){
            case $opt in
                -sa) opt=$aID ;;-sb) opt=$bID ;;-sc) opt=$cID ;;-sd) opt=$dID ;;-sv) opt=$vID
                ;;
                    
                *) 
                formats="
            \e[035ma\e[0m: 1080p Video
            \e[035mb\e[0m: 1440p Video
            \e[035mc\e[0m: 720p Video
            \e[035md\e[0m: mp3 Audio
            \e[035mv\e[0m: if all of the above formats fail or non-youtube videos\n"
                echo -en "select format\n$formats \n -: "
                read opt
                case $opt in
                    a) opt=$aID;;b) opt=$bID;;c) opt=$cID;;d) opt=$dID;;v) opt=$vID;;
                    *) echo "please select the given formats!";exit 1;;
                esac
                ;;
            esac
        }
        if [[ $opt == -s*-l ]];then
            for times in {1..4};do
                fnd_p -s -v --ytdl-format=$opt --fs "$1"
            done
        else
            fnd_p -s -v --ytdl-format=$opt --fs "$1"
        fi
    else
        echo -e "\e[031mYou need to download mpv to stream file!\e[0m"
        exit $?
    fi

else 
    echo -e "\e[031mplease re-run script and give correct arguments accordingly\e[0m"
    echo -e "Usage: $(basename $0) {OPTION} <url> | <destination>
    Options:
        $formats
    \e[031m--> Also check to confirm if the \e[034mdestination\e[031m folder exists\e[0m"
    rm -rf $LOG_FILE
    exit 1
fi
