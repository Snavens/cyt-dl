#!/bin/bash
#
#   Copyright (c) 2023 falkensnavens
#   All rights reserved.
#
# source -- https://github.com/Snavens/cyt-dl
# 
formats="
    \e[035ma\e[0m: Downloads 1080p Video
    \e[035mb\e[0m: Downloads 1440p Video
    \e[035mc\e[0m: Downloads 720p Video
    \e[035md\e[0m: Downloads mp3 Audio
    \e[035me\e[0m: Downloads 2160p Video
    \e[035mv\e[0m: Downloads video where all of the above formats fail or non-youtube videos
    --> If you wish to download and play add \e[035mp\e[0m(for example \e[035map\e[0m) to your \e[034moptions\e[0m.
    --> If for any reason format fails try using \e[035mv\e[0m as \e[034moption\e[0m.
    --> Use \e[034moption\e[0m \e[035m-s\e[0m(format) to stream files.
    \e[096mWhen download and play option is selected:\e[0m
    --> Loop play \e[035m-l\e[0m just after \e[034moption\e[0m. 
    --> Play last downloaded with \e[035m-p\e[0m as \e[034moption\e[0m.\n"
#print usage and help
if [[ $# -eq 0 || $1 == -help || $1 == --help || $1 == -h || $1 == --h ]] ; then
    echo "Usage: $(basename $0) {OPTION} <url> | <destination>"
    echo -e "Options:$formats
    Default directory is \e[033m"`echo ~/Downloads`"\e[0m folder, i.e if you omit destination folder"
    exit 0
fi

#assign dlc to downloads folder
if [[ $# -eq 3 && -d $3 ]];then
    dlc="$(realpath "$3")"
    cd "$dlc"
elif [[ $# -eq 4 && $2 == -l && -d $4 ]];then
    dlc="$(realpath "$4")"
    cd "$dlc"
elif [[ $# -eq 2 || $# -eq 3 && $2 == -l ]];then
    # default option for storing downloaded content in Downloads directory
    dlc="`echo ~/Downloads`"
    cd "$dlc"
fi

#start of main code
fnd() {

    case $1 in
        p)
		if [[ $# -eq 3 && -d "$2" ]];then
            cd "$2"
            if [[ $(command -v mpv) && $(ps -ef|grep mpv|wc -l) < 2 ]];then
                mpv_player() {
                    echo "$(find -iname "*$3*" -exec echo \"{}\" \;)"|grep -v ".json">${tmp_scrpt}
                    if [[ $(cat ${tmp_scrpt}) ]];then
                        echo -en "\e[033mPlaying:\e[094m"
                        list='';while IFS= read li;do list="$list $li";done <${tmp_scrpt}
                        bash<<<$(echo "mpv -v --fs $list >/dev/null 2>&1 &")
                        echo -e "
$(cat ${tmp_scrpt}|nl)\e[032m";sleep 1
                        #remove temp files
                        rm ${tmp_scrpt} >/dev/null 2>&1
                    else
                        echo -e "\e[031mno files found!"
                    fi
                }
                mpv_player "$@"
            elif [[ $(command -v vlc) ]];then
                vlc_player() {
                    echo "$(find -iname "*$3*" -exec echo "vlc -q --fullscreen --one-instance --playlist-enqueue --play-and-exit \"{}\" >/dev/null 2>&1 &" \;)"|grep -v ".json">${tmp_scrpt}
                    if [[ $(cat ${tmp_scrpt}) ]];then
                        echo -en "\e[033mAdding to playlist:\e[094m"
                        bash ${tmp_scrpt}
                        echo -e "
$(find -iname "*$3*" -exec echo \'{}\' \;|grep -v ".json"|nl)\e[032m";sleep 1
                        #remove temp files
                        rm ${tmp_scrpt} >/dev/null 2>&1
                    else
                        echo -e "\e[031mno files found!"
                    fi
                }
                vlc_player "$@"
            else
                mpv_player() {
                    echo "$(find -iname "*$3*" -exec echo \"{}\" \;)"|grep -v ".json">${tmp_scrpt}
                    if [[ $(cat ${tmp_scrpt}) ]];then
                        echo -en "\e[033mPlaying:\e[094m"
                        list='';while IFS= read li;do list="$list $li";done <${tmp_scrpt}
                        bash<<<$(echo "mpv -v --fs $list >/dev/null 2>&1 &")
                        echo -e "
$(cat ${tmp_scrpt}|nl)\e[032m";sleep 1
                        #remove temp files
                        rm ${tmp_scrpt} >/dev/null 2>&1
                    else
                        echo -e "\e[031mno files found!"
                    fi
                }
                mpv_player "$@"
            fi
            
        elif [[ $# -eq 3 && ! -d "$2" ]];then
            echo -e "\e[031mThe source folder doesn't exist!"
        fi
		;;

		pl)
		if [[ $# -eq 3 && -d "$2" ]];then
            cd "$2"
            if [[ $(command -v mpv) && $(ps -ef|grep mpv|wc -l) < 2 ]];then
                mpv_player() {
                    find -iname "*$3*" -exec echo "\"{}\"" \;|grep -v ".json" >${tmp_scrpt}
                    if [[ $(cat ${tmp_scrpt}) ]];then
                        echo -en "\e[033mPlaying:\e[094m"
                        list="";while IFS= read -r li;do list="$list $li";done<${tmp_scrpt}
                        bash<<<$(echo "mpv -v --loop-file=3 --fs$list >/dev/null 2>&1 &"|grep -v ".json")
                        echo -e "
$(cat ${tmp_scrpt}|nl)\e[032m";sleep 1
                        #remove temp files
                        rm ${tmp_scrpt} >/dev/null 2>&1
                    else
                        echo -e "\e[031mno files found!"
                    fi
                }
                mpv_player "$@"
            elif [[ $(command -v vlc) ]];then
                vlc_player() {
                    echo "$(find -iname "*$3*" -exec echo "vlc -q --fullscreen --one-instance --playlist-enqueue --play-and-exit \"{}\" >/dev/null 2>&1 &" \;)"|grep -v ".json">${tmp_scrpt}
                    if [[ $(cat ${tmp_scrpt}) ]];then
                        echo -en "\e[033mAdding to playlist:\e[094m"
                        bash<<<$(for i in {1..4};do echo "`cat ${tmp_scrpt}`";done) 
                        echo -e "
$(find -iname "*$3*" -exec echo \'{}\' \;|grep -v ".json"|nl)\e[032m";sleep 1
                        #remove temp files
                        rm ${tmp_scrpt} >/dev/null 2>&1
                    else
                        echo -e "\e[031mno files found!"
                    fi
                }
                vlc_player "$@"  
            else
                mpv_player() {
                    find -iname "*$3*" -exec echo "\"{}\"" \;|grep -v ".json" >${tmp_scrpt}
                    if [[ $(cat ${tmp_scrpt}) ]];then
                        echo -en "\e[033mPlaying:\e[094m"
                        list="";while IFS= read -r li;do list="$list $li";done<${tmp_scrpt}
                        bash<<<$(echo "mpv -v --loop-file=3 --fs$list >/dev/null 2>&1 &"|grep -v ".json")
                        echo -e "
$(cat ${tmp_scrpt}|nl)\e[032m";sleep 1
                        #remove temp files
                        rm ${tmp_scrpt} >/dev/null 2>&1
                    else
                        echo -e "\e[031mno files found!"
                    fi
                }
                mpv_player "$@"
            fi
            
        elif [[ $# -eq 3 && ! -d "$2" ]];then
            echo -e "\e[031mThe source folder doesn't exist!"
        fi
		;;
        s)
        shift
        mpv $@
        ;;
	esac

}
tmp_scrpt=/tmp/cyt-fnd.sh
LOG_FILE=/tmp/.cyt-tmp
HIST_FILE=~/.cyt-hist.tmp
fnd_p() {
   
    if [[ $1 == -l ]];then
        shift;p=pl
    elif [[ $1 == -s ]];then
        shift
        echo "s $@">${HIST_FILE}
        fnd `cat ${HIST_FILE}` 
        return
    else
        p=p
    fi

    if [[ $(grep "+" <<< $(grep -oP '(?<=format\(s\):\s).*(?=)' ${LOG_FILE})) ]];then
        formats=2
    else
        formats=1
    fi

    if [[ $(grep downloaded ${LOG_FILE}) || $(grep "download]\s100%" ${LOG_FILE}|wc -l) == $formats \
        || $(grep "download]\s100%" ${LOG_FILE}|wc -l) > $formats ]];then
        LOG=`tac ${LOG_FILE}|grep -m1 -oP '(?<=]\s).*?(?=:\sDownloading)'`
        if [[ ! -z $LOG ]];then 
            if command -v mpv &>/dev/null ;then
                fnd $p "$dlc" "$LOG"
            else
                echo -e "\e[031mYou need to download mpv to play file!\e[0m"
                exit $?
            fi
            echo "$p \"$dlc\" "$LOG"">${HIST_FILE}
        else
            return
        fi
        
    else
        echo -e "Download failed!"
        return
    fi
    rm ${LOG_FILE} >/dev/null 2>&1

}
aID="248+251"/"137+251"/"399+140"/"303+140"/"299+251"/"96"; bID="400+140"/"271+251" ; dID="140"/"251"/"250"
cID="247+140"/"22+251"/"136+140"/"398+251" ; vID=b/"299+250"/"303+251"/"301"/"243+140"/"136+250"/hls-2176/http/mpeg/fallback
eID="337+140"/"315+251"/"337+251"/"315+140"

#default storage as windows downloads folder
if [[ $# -eq 2 && -d $dlc && $1 == a ]]; then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $aID --merge-output-format mp4 --embed-subs "$2"
elif [[ $# -eq 2 && -d $dlc && $1 == b ]]; then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $bID --merge-output-format mp4 --embed-subs "$2"
elif [[ $# -eq 2 && -d $dlc && $1 == c ]]; then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $cID --merge-output-format mp4 --embed-subs "$2"
elif [[ $# -eq 2 && -d $dlc && $1 == d ]]; then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $dID --extract-audio --audio-format mp3 --audio-quality 1 "$2"
elif [[ $# -eq 2 && -d $dlc && $1 == v ]];then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $vID --merge-output-format mp4 --embed-subs "$2"
elif [[ $# -eq 2 && -d $dlc && $1 == e ]];then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $eID --merge-output-format mp4 --embed-subs "$2"

#for known folders do,
elif [[ $# -eq 3 && -d $dlc && $1 == a ]]; then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $aID --merge-output-format mp4 --embed-subs "$2"
elif [[ $# -eq 3 && -d $dlc && $1 == b ]]; then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $bID --merge-output-format mp4 --embed-subs "$2"
elif [[ $# -eq 3 && -d $dlc && $1 == c ]]; then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $cID --merge-output-format mp4 --embed-subs "$2"
elif [[ $# -eq 3 && -d $dlc && $1 == d ]]; then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $dID --extract-audio --audio-format mp3 --audio-quality 1 "$2"
elif [[ $# -eq 3 && -d $dlc && $1 == v ]];then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $vID --merge-output-format mp4 --embed-subs "$2"
elif [[ $# -eq 3 && -d $dlc && $1 == e ]];then
    echo -e "\e[032mSaving to $dlc\e[0m";yt-dlp -f $eID --merge-output-format mp4 --embed-subs "$2"

#default storage as windows downloads folder
elif [[ $# -eq 2 && -d $dlc && $1 == ap ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $aID --merge-output-format mp4 --embed-subs "$2" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p

elif [[ $# -eq 2 && -d $dlc && $1 == bp ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $bID --merge-output-format mp4 --embed-subs "$2" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p

elif [[ $# -eq 2 && -d $dlc && $1 == cp ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $cID --merge-output-format mp4 --embed-subs "$2" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p

elif [[ $# -eq 2 && -d $dlc && $1 == dp ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $dID --extract-audio --audio-format mp3 --audio-quality 1 "$2" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p

elif [[ $# -eq 2 && -d $dlc && $1 == vp ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $vID --merge-output-format mp4 --embed-subs "$2" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p
elif [[ $# -eq 2 && -d $dlc && $1 == ep ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $eID --merge-output-format mp4 --embed-subs "$2" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p

#default storage as windows downloads folder and if loop enabled, do
elif [[ $# -eq 3 && -d $dlc && $1 == ap && $2 == -l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $aID --merge-output-format mp4 --embed-subs "$3" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l

elif [[ $# -eq 3 && -d $dlc && $1 == bp && $2 == -l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $bID --merge-output-format mp4 --embed-subs "$3" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l

elif [[ $# -eq 3 && -d $dlc && $1 == cp && $2 == -l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $cID --merge-output-format mp4 --embed-subs "$3" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l

elif [[ $# -eq 3 && -d $dlc && $1 == dp && $2 == -l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $dID --extract-audio --audio-format mp3 --audio-quality 1 "$3" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l

elif [[ $# -eq 3 && -d $dlc && $1 == vp && $2 == -l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $vID --merge-output-format mp4 --embed-subs "$3" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l
elif [[ $# -eq 3 && -d $dlc && $1 == ep && $2 == -l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $eID --merge-output-format mp4 --embed-subs "$3" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l

#for known downloads directory, do
elif [[ $# -eq 3 && -d $3 && $1 == ap ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $aID --merge-output-format mp4 --embed-subs "$2" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p

elif [[ $# -eq 3 && -d $3 && $1 == bp ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $bID --merge-output-format mp4 --embed-subs "$2" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p

elif [[ $# -eq 3 && -d $3 && $1 == cp ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $cID --merge-output-format mp4 --embed-subs "$2" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p

elif [[ $# -eq 3 && -d $3 && $1 == dp ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $dID --extract-audio --audio-format mp3 --audio-quality 1 "$2" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p

elif [[ $# -eq 3 && -d $3 && $1 == vp ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $vID --merge-output-format mp4 --embed-subs "$2" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p
elif [[ $# -eq 3 && -d $3 && $1 == ep ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $eID --merge-output-format mp4 --embed-subs "$2" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p

#for known downloads directory and if loop enabled, do
elif [[ $# -eq 4 && -d $4 && $1 == ap && $2 == -l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $aID --merge-output-format mp4 --embed-subs "$3" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l

elif [[ $# -eq 4 && -d $4 && $1 == bp && $2 == -l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $bID --merge-output-format mp4 --embed-subs "$3" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l

elif [[ $# -eq 4 && -d $4 && $1 == cp && $2 == -l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $cID --merge-output-format mp4 --embed-subs "$3" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l

elif [[ $# -eq 4 && -d $4 && $1 == dp && $2 == -l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $dID --extract-audio --audio-format mp3 --audio-quality 1 "$3" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l

elif [[ $# -eq 4 && -d $4 && $1 == vp && $2 == -l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $vID --merge-output-format mp4 --embed-subs "$3" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l
elif [[ $# -eq 4 && -d $4 && $1 == ep && $2 == -l ]];then
    echo -e "\e[032mSaving to $dlc\e[0m"
    yt-dlp -f $eID --merge-output-format mp4 --embed-subs "$3" > >(tee ${LOG_FILE}) 2> >(tee ${LOG_FILE} 2>&1)
    fnd_p -l

#play later
elif [[ $# -eq 1 && $1 == -p ]];then 
    if [[ -f ${HIST_FILE} ]];then #check if file exists
        fnd `cat ${HIST_FILE}` 
    else 
        echo -e "\e[031mYou haven't downloaded any file!"
        exit 1
    fi

elif [[ $1 == -s* ]];then #stream 
    if command -v mpv &>/dev/null ;then
        format_selector(){
            case $1 in
                -sa) opt=$aID ;;-sb) opt=$bID ;;-sc) opt=$cID ;;-sd) opt=$dID ;;-sv) opt=$vID ;;-se) opt=$eID
                ;;
                    
                *) 
                formats="
            \e[035ma\e[0m: 1080p Video
            \e[035mb\e[0m: 1440p Video
            \e[035mc\e[0m: 720p Video
            \e[035md\e[0m: mp3 Audio
            \e[035mv\e[0m: if all of the above formats fail or non-youtube videos\n"
                echo -en "select format\n$formats \n -: "
                read opt
                case $opt in
                    a) opt=$aID;;b) opt=$bID;;c) opt=$cID;;d) opt=$dID;;v) opt=$vID;;e) opt=$eID;;
                    *) echo "please select the given formats!";exit 1;;
                esac
                ;;
            esac
        }
        cd ~/Downloads 
        if [[ $# -eq 2 ]];then
            format_selector $1
            fnd_p -s -v --player-operation-mode=pseudo-gui --ytdl-format=$opt --ytdl-raw-options="no-simulate=,skip-download=,write-auto-sub=,sub-langs=en=,output=./%(title)s-%(id)s.%(ext)s"= --fs "$2"
        elif [[ $# -eq 3 && $2 == -l ]];then
            format_selector $1
            shift
            for times in {1..4};do
                fnd_p -s -v --player-operation-mode=pseudo-gui --ytdl-format=$opt --ytdl-raw-options="no-simulate=,skip-download=,write-auto-sub=,sub-langs=en=,output=./%(title)s-%(id)s.%(ext)s"= --fs "$2">&2
            done
        elif [[ $# > 3 && $2 == -l ]];then
            echo -e "\e[031mloop option is available for one file only!\e[0m"
            exit $?
        else
            shift
            for urls in "$@";do
                $0 -s $urls >&2
            done 
        fi
    else
        echo -e "\e[031mYou need to download mpv to stream file!\e[0m"
        exit $?
    fi

else 
    echo -e "\e[031mplease re-run script and give correct arguments accordingly\e[0m"
    echo -e "Usage: $(basename $0) {OPTION} <url> | <destination>
    Options:
        $formats
    \e[031m--> Also check to confirm if the \e[034mdestination\e[031m folder exists\e[0m"
    rm -rf $LOG_FILE
    exit 1
fi
